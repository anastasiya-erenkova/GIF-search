{"version":3,"sources":["components/loader.js","App.js","serviceWorker.js","store/reducers/index.js","index.js"],"names":["Loader","react_default","a","createElement","className","App","onInputChange","value","_this$props","_this","props","changeSearchText","changeError","searchGIF","e","_this$props2","saveImages","toggleLoader","searchText","app","preventDefault","trim","axios","get","concat","then","res","links","data","map","item","id","url","images","downsized","setNewImage","catch","console","log","checkDuplicate","imagesArray","arrayOfWatchedImages","changeWatched","randomNum","getRandomNumber","find","index","includes","newArray","Object","toConsumableArray","min","max","Math","floor","random","_this$props3","this","changeImage","_this$props$app","watched","_this2","_this$props$app2","image","error","loading","onSubmit","loader","length","src","alt","type","onChange","target","Component","connect","state","dispatch","bool","payload","array","text","img","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","objectSpread","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcd5b12a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loader = () => (\r\n  <div className=\"lds-css ng-scope\">\r\n    <div className=\"lds-ellipsis\">\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\n// Components\r\nimport Loader from './components/loader';\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends Component {\r\n  // Инпут\r\n  onInputChange = value => {\r\n    const { changeSearchText, changeError } = this.props;\r\n\r\n    changeSearchText(value);\r\n    changeError(null);\r\n  }\r\n\r\n  // Поиск гифки\r\n  searchGIF = e => {\r\n    const { saveImages, toggleLoader, changeError } = this.props;\r\n    const { searchText } = this.props.app;\r\n    const apiKey = 'SccsoCNcduBUF6EiYr9iHKfb90UuRRbQ&limit=150';\r\n\r\n    e.preventDefault();\r\n\r\n    toggleLoader(true);\r\n    changeError(null);\r\n\r\n    if (searchText.trim() !== '') {\r\n      axios.get(`https://api.giphy.com/v1/gifs/search?q=${searchText}&api_key=${apiKey}`)\r\n      .then(res => {\r\n        const links = res.data.data.map((item) => {\r\n          return {\r\n            id: item.id,\r\n            url: item.images.downsized.url,\r\n          };\r\n        });\r\n\r\n        saveImages(links);\r\n        \r\n        this.setNewImage();\r\n        toggleLoader(false);\r\n      })\r\n      .catch(() => {\r\n        toggleLoader(false);\r\n        console.log('Упс! Проблема с запросом, попробуй другое слово :(');\r\n      });\r\n    } else {\r\n      toggleLoader(false);\r\n      changeError('Введите слово');\r\n    }\r\n  }\r\n\r\n  setNewImage() {\r\n    const { changeImage, toggleLoader } = this.props;\r\n    const { links, watched } = this.props.app;\r\n\r\n    toggleLoader(true);\r\n\r\n    const image = this.checkDuplicate(links, watched);\r\n\r\n    changeImage(image);\r\n    toggleLoader(false);\r\n  }\r\n\r\n  // TODO\r\n  // Проверяем на дубликаты и заменяем на непросмотренные\r\n  checkDuplicate = (imagesArray, arrayOfWatchedImages) => {\r\n    const { changeWatched } = this.props;\r\n    const maxCount = 149;\r\n    const randomNum = this.getRandomNumber(0, maxCount);\r\n    // console.log('num', randomNum);\r\n    const image = imagesArray.find((item, index) => {\r\n      const { id } = item;\r\n\r\n      if (!arrayOfWatchedImages.includes(id)) {\r\n        const newArray = [...arrayOfWatchedImages, id];\r\n        changeWatched(newArray);\r\n      }\r\n\r\n      return index === randomNum && !arrayOfWatchedImages.includes(id);\r\n    });\r\n\r\n    return image.url;\r\n\r\n    // if (!image) {\r\n    //   // console.log('Got deplicate!', arrayOfWatchedImages);\r\n    //   if (maxCount < arrayOfWatchedImages.length) {\r\n    //     // console.log('recursion', maxCount <= arrayOfWatchedImages.length, maxCount, arrayOfWatchedImages.length)\r\n    //     this.setNewImage();\r\n    //     // this.checkDuplicate(imagesArray, arrayOfWatchedImages);\r\n    //   } else if (maxCount === arrayOfWatchedImages.length) {\r\n    //     changeWatched([]);\r\n    //     this.setNewImage();\r\n    //   } else {\r\n    //     this.setNewImage();\r\n    //     // console.log('wops!');\r\n    //   }\r\n    // } else {\r\n    //    return image.url;\r\n    // }\r\n  }\r\n\r\n  // Получаем рандомное число\r\n  getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  render() {\r\n    const { links, image, error, loading } = this.props.app;\r\n\r\n    // const buttonType = links.length ? 'button' : 'submit';\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <form className=\"form\" onSubmit={this.searchGIF}>\r\n            <h1 className=\"title\">Найди свою гифку!</h1>\r\n            <div className=\"search-result\">\r\n              {loading ? <Loader /> : null}\r\n              {links.length && !loading ? <img src={image} alt=\"\"/> : null}\r\n            </div>\r\n            <div className=\"search-bar\">\r\n              <input type=\"text\" onChange={e => this.onInputChange(e.target.value)} />\r\n              {/* <button type={buttonType} onClick={() => links.length ? this.setNewImage() : null}>{links.length ? 'Ещё!' : 'Найти!'}</button> */}\r\n              <button type=\"submit\">{links.length ? 'Ещё!' : 'Найти!'}</button>\r\n            </div>\r\n            {error ? <p className=\"error\">{error}</p> : null}\r\n          </form>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  app: state,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatch => ({\r\n    toggleLoader: bool => dispatch({ type: 'TOGGLE_LOADER', payload: bool }),\r\n    saveImages: array => dispatch({ type: 'CHANGE_LINKS', payload: array }),\r\n    changeSearchText: text => dispatch({ type: 'CHANGE_INPUT', payload: text }),\r\n    changeImage: img => dispatch({ type: 'CHANGE_IMAGE', payload: img}),\r\n    changeError: text => dispatch({ type: 'CHANGE_ERROR', payload: text }),\r\n    changeWatched: array => dispatch({ type: 'CHANGE_WATCHED', payload: array }),\r\n  }),\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = {\r\n  searchText: '',\r\n  links: [],\r\n  watched: [],\r\n  image: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case 'CHANGE_INPUT':\r\n      return { ...state, searchText: payload };\r\n    case 'CHANGE_LINKS':\r\n      return {...state, links: payload };\r\n    case 'CHANGE_ERROR':\r\n      return {...state, error: payload };\r\n    case 'CHANGE_WATCHED':\r\n      return {...state, watched: payload };\r\n    case 'CHANGE_IMAGE':\r\n      return {...state, image: payload };\r\n    case 'TOGGLE_LOADER':\r\n      return {...state, loading: payload };\r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from './store/reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}