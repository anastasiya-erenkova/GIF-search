{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","searchText","links","btnText","image","err","onInputChange","e","value","target","_this","setState","searchGIF","preventDefault","phrase","trim","fetch","concat","method","then","response","json","data","map","item","push","images","downsized","url","generateImage","randomNum","Math","floor","random","index","_this$state","this","error","react_default","a","createElement","className","onSubmit","length","src","alt","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGqBA,oNAEnBC,MAAQ,CACNC,WAAY,GACZC,MAAO,GACPC,QAAS,kCACTC,MAAO,KACPC,IAAK,QAIPC,cAAgB,SAACC,GACf,IAAMC,EAAQD,EAAEE,OAAOD,MAEvBE,EAAKC,SAAS,CACZN,IAAK,KACLJ,WAAYO,EACZL,QAAS,uCAKbS,UAAY,SAACL,GACXA,EAAEM,iBAEF,IAAMC,EAASJ,EAAKV,MAAMC,WAEJ,KAAlBa,EAAOC,OACTC,MAAK,0CAAAC,OAA2CH,EAA3C,sDACL,CACEI,OAAQ,QAETC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GACL,IAAIpB,EAAQ,GAEZoB,EAAKA,KAAKC,IAAI,SAACC,GAGb,OAFAtB,EAAMuB,KAAKD,EAAKE,OAAOC,UAAUC,MAE1B,IAGTlB,EAAKC,SAAS,CACZT,QACAC,QAAS,wBAGXO,EAAKmB,kBAGPnB,EAAKC,SAAS,CAAEN,IAAK,iFAKzBwB,cAAgB,WAAM,IACZ3B,EAAUQ,EAAKV,MAAfE,MAEF4B,EAAYC,KAAKC,MAAM,GAAAD,KAAKE,UAAuB,EAEzD/B,EAAMqB,IAAI,SAACnB,EAAO8B,GAOhB,OANIA,IAAUJ,GACZpB,EAAKC,SAAS,CACZP,MAAOA,KAIJ,6EAIF,IAAA+B,EACuCC,KAAKpC,MAA3CE,EADDiC,EACCjC,MAAOC,EADRgC,EACQhC,QAASC,EADjB+B,EACiB/B,MAAYiC,EAD7BF,EACwB9B,IAE/B,OACEiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOC,SAAWN,KAAKxB,WACrC0B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,2FACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACM,IAAjBvC,EAAMyC,OAAeL,EAAAC,EAAAC,cAAA,OAAKI,IAAKxC,EAAOyC,IAAI,KAAO,MAErDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,SAAUX,KAAK9B,gBAClCgC,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAW3C,IAEd,OAAVkC,EAAiBC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASJ,GAAa,eAtFjCW,cCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.bff74622.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class App extends Component {\n\n  state = {\n    searchText: '',\n    links: [],\n    btnText: 'Найти!',\n    image: null,\n    err: null\n  }\n\n  // Инпут\n  onInputChange = (e) => {\n    const value = e.target.value;\n    \n    this.setState({\n      err: null,\n      searchText: value,\n      btnText: 'Найти!'\n    });\n  }\n\n  // Поиск гифки\n  searchGIF = (e) => {\n    e.preventDefault();\n\n    const phrase = this.state.searchText;\n\n    if (phrase.trim() !== '') {\n      fetch(`https://api.giphy.com/v1/gifs/search?q=${phrase}&api_key=SccsoCNcduBUF6EiYr9iHKfb90UuRRbQ&limit=25`,\n      {\n        method: \"GET\"\n      })\n      .then(response => response.json())\n      .then((data) => {\n        let links = [];\n\n        data.data.map((item) => {\n          links.push(item.images.downsized.url);\n\n          return false;\n        });\n\n        this.setState({\n          links,\n          btnText: 'Ещё!'\n        });\n        \n        this.generateImage();\n      });\n    } else {\n      this.setState({ err: 'Введите слово' })\n    }\n  }\n\n  // Генерируем результат\n  generateImage = () => {\n    const { links } = this.state;\n\n    const randomNum = Math.floor(Math.random() * (24 - 0)) + 0;\n    \n    links.map((image, index) => {\n      if (index === randomNum) {\n        this.setState({\n          image: image\n        });\n      };\n\n      return false;\n    });\n  }\n\n  render() {\n    const { links, btnText, image, err: error } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form className=\"form\" onSubmit={ this.searchGIF }>\n            <h1 className=\"title\">Найди свою гифку!</h1>\n            <div className=\"search-result\">\n              { links.length !== 0 ? <img src={image} alt=\"\"/> : null }\n            </div>\n            <div className=\"search-bar\">\n              <input type=\"text\" onChange={this.onInputChange}/>\n              <button type=\"submit\">{ btnText }</button>\n            </div>\n            { error !== null ? <p className=\"error\">{error}</p> : null }\n          </form>\n        </header>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}